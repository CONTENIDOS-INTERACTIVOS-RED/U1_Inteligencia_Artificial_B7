{"remainingRequest":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/src/views/curso/Tema3.vue?vue&type=template&id=303418f5&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/src/views/curso/Tema3.vue","mtime":1746414312276},{"path":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Inteligencia_Artificial_B7/U1_Inteligencia_Artificial_B7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gQXBsaWNhY2lvbmVzIGRlIGxhIElBJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5iZy1jb2xvci05Lm1iLTUoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvLm1iLTMubWItbGctMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzEucG5nJywgYWx0PScnKQogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgRXMgaW1wb3J0YW50ZSBlbiBjdWVudGEgcXVlIGxhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsLCBkZXNkZSBzdSBjb25jZXB0bywgcGFydGUgZGUgbGEgaWRlYSBkZSBxdWUgYWwgdXNhciBoZXJyYW1pZW50YXMgY29tcHV0YWNpb25hbGVzLCBzZSByZWFsaXphbiBhY3RpdmlkYWRlcywgcXVlIGFzZW1lamFuIGFsIGNvbXBvcnRhbWllbnRvIGh1bWFubywgbG8gcXVlIHRpZW5lIHVuYSBncmFuIHZhcmllZGFkIGRlIGFwbGljYWNpb25lcyB5IGRlIGNhbXBvcyBkZSBhY2Npb25lczsgYSBjb250aW51YWNpw7NuLCBzZSByZWxhY2lvbmFuIGxvcyBtw6FzIHJlbGV2YW50ZXMgeSBkZSBpbnRlcsOpcywgZW4gbGEgYWN0dWFsaWRhZC4KCiAgICAjdF8zXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMy4xXSBTZWN0b3IgZGUgbGEgc2FsdWQKICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yLnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTGEgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgaGEgZGVtb3N0cmFkbyBzdSBwb3RlbmNpYWwgZW4gZWwgY2FtcG8gZGUgbGEgc2FsdWQsIGNvbiBhcGxpY2FjaW9uZXMgcXVlIHZhbiBkZXNkZSBlbCBkaWFnbsOzc3RpY28gbcOpZGljbyBhc2lzdGlkbyBwb3IgY29tcHV0YWRvcmEsIGhhc3RhIGVsIGRlc2Fycm9sbG8gZGUgZsOhcm1hY29zIHkgbGEgb3B0aW1pemFjacOzbiBkZSBsb3MgcHJvY2Vzb3MgZGUgZ2VzdGnDs24gaG9zcGl0YWxhcmlhCiAgICAgICAgcCBBIGNvbnRpbnVhY2nDs24sIHNlIHJlbGFjaW9uYW4gbG9zIHByaW5jaXBhbGVzIGVudG9ybm9zIGRlIGFwbGljYWNpw7NuIGRlIGxhIElBIGVuIGVsIHNlY3RvcjogIAogICAgCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzMucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04Lm1iLTMubWItbGctMC5vcmRlci0xCiAgICAKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRGlhZ27Ds3N0aWNvIG3DqWRpY28iKQogICAgICAgICAgICBwIEFsZ29yaXRtb3MgZGUgPGVtPkRlZXAgTGVhcm5pbmc8L2VtPiBhbmFsaXphbiBpbcOhZ2VuZXMgbcOpZGljYXMgKHJhZGlvZ3JhZsOtYXMsIHRvbW9ncmFmw61hcywgcmVzb25hbmNpYXMpLCBwYXJhIGRldGVjdGFyIGVuZmVybWVkYWRlcyBjb21vIGVsIGPDoW5jZXIgZGUgcGllbCB5IGVuZmVybWVkYWRlcyBwdWxtb25hcmVzLCBlbnRyZSBvdHJhcy4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89Ik1lZGljaW5hIHBlcnNvbmFsaXphZGEiKQogICAgICAgICAgICBwIExhIElBIGFuYWxpemEgZGF0b3MgZ2Vuw6l0aWNvcyB5IGNsw61uaWNvcywgcGFyYSByZWNvbWVuZGFyIHRyYXRhbWllbnRvcyBhZGFwdGFkb3MgYSBjYWRhIHBhY2llbnRlLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQXNpc3RlbnRlcyB2aXJ0dWFsZXMgbcOpZGljb3MiKQogICAgICAgICAgICBwIDxlbT5DaGF0Ym90czwvZW0+IHkgYXNpc3RlbnRlcyBkZSB2b3osIGF5dWRhbiBhIHJlc3BvbmRlciBwcmVndW50YXMgc29icmUgc8OtbnRvbWFzIHkgbWVkaWNhbWVudG9zLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRGVzY3VicmltaWVudG8gZGUgZsOhcm1hY29zIikKICAgICAgICAgICAgcCBMYSBJQSBhY2VsZXJhIGxhIGlkZW50aWZpY2FjacOzbiBkZSBudWV2b3MgbWVkaWNhbWVudG9zLCByZWR1Y2llbmRvIGNvc3RvcyB5IHRpZW1wb3MgZGUgZGVzYXJyb2xsby4KICAgIAogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBUYWJsYSAyLgogICAgICBzcGFuIEFwbGljYWNpb25lcyBkZSBsYSBJQSBlbiBlbCBzZWN0b3Igc2FsdWQKICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgdGFibGUuYmctY29sb3ItOAogICAgICAgIHRoZWFkCiAgICAgICAgICB0cgogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgw4FyZWEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEFwbGljYWNpb25lcyBkZSBJQQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgRWplbXBsbwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBEaWFnbsOzc3RpY28geSBkZXRlY2Npw7NuIGRlIGVuZmVybWVkYWRlcwogICAgICAgICAgICB0ZCBBbsOhbGlzaXMgZGUgaW3DoWdlbmVzIG3DqWRpY2FzLCBkZXRlY2Npw7NuIHRlbXByYW5hLCBpbnRlcnByZXRhY2nDs24gZGUgcHJ1ZWJhcy4KICAgICAgICAgICAgdGQgPGVtPkRlZXBNaW5kPC9lbT4gZGV0ZWN0YSBlbmZlcm1lZGFkZXMgb2N1bGFyZXMgY29uIElBLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBEZXNhcnJvbGxvIGRlIG1lZGljYW1lbnRvcyB5IHRlcmFwaWFzCiAgICAgICAgICAgIHRkIERlc2N1YnJpbWllbnRvIGRlIGbDoXJtYWNvcywgc2ltdWxhY2nDs24gcXXDrW1pY2EsIG1lZGljaW5hIHBlcnNvbmFsaXphZGEuCiAgICAgICAgICAgIHRkIDxlbT5BbHBoYUZvbGQ8L2VtPiBwcmVkaWNlIGVzdHJ1Y3R1cmFzIGRlIHByb3Rlw61uYXMgcGFyYSBiaW9tZWRpY2luYS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEFzaXN0ZW50ZXMgdmlydHVhbGVzIHkgdGVsZW1lZGljaW5hCiAgICAgICAgICAgIHRkIDxlbT5DaGF0Ym90cyBtw6lkaWNvczwvZW0+LCBldmFsdWFjacOzbiBkZSBzw61udG9tYXMsIG1vbml0b3JlbyByZW1vdG8uIAogICAgICAgICAgICB0ZCA8ZW0+QmFieWxvbiBIZWFsdGg8L2VtPiBhbmFsaXphIHPDrW50b21hcyB5IHN1Z2llcmUgY29uc3VsdGFzLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBHZXN0acOzbiBob3NwaXRhbGFyaWEKICAgICAgICAgICAgdGQgT3B0aW1pemFjacOzbiBkZSByZWN1cnNvcywgcHJlZGljY2nDs24gZGUgZGVtYW5kYSwgbWFuZWpvIGRlIGhpc3RvcmlhbGVzLgogICAgICAgICAgICB0ZCA8ZW0+TW91bnQgU2luYWk8L2VtPiBIb3NwaXRhbCB1c2EgSUEgcGFyYSBwcmVkZWNpciBvY3VwYWNpw7NuIGhvc3BpdGFsYXJpYS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEdlbsOzbWljYSB5IG1lZGljaW5hIGRlIHByZWNpc2nDs24KICAgICAgICAgICAgdGQgQW7DoWxpc2lzIGRlIEFETiwgcHJlZGljY2nDs24gZGUgcmllc2dvcyBnZW7DqXRpY29zLCB0ZXJhcGlhcyBwZXJzb25hbGl6YWRhcy4gCiAgICAgICAgICAgIHRkIDxlbT5JQk0gV2F0c29uPC9lbT4gcmVjb21pZW5kYSB0cmF0YW1pZW50b3Mgb25jb2zDs2dpY29zLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBSb2LDs3RpY2EgZW4gc2FsdWQKICAgICAgICAgICAgdGQgQ2lydWfDrWEgYXNpc3RpZGEsIHJlaGFiaWxpdGFjacOzbiwgYXNpc3RlbmNpYSBlbiBjdWlkYWRvcyBkZSBhbmNpYW5vcy4KICAgICAgICAgICAgdGQgPGVtPlJvYm90IERhIFZpbmNpPC9lbT4gcmVhbGl6YSBjaXJ1Z8OtYXMgZGUgcHJlY2lzacOzbi4KICAgIAogICAgI3RfM18yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuMl0gU2VjdG9yIGZpbmFuY2llcm8KICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIHAubWItNCBMYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCBlbiBlbCBzZWN0b3IgZmluYW5jaWVybyBoYSBsb2dyYWRvIG9wdGltaXphciBwcm9jZXNvcywgbWVqb3JhciBsYSBzZWd1cmlkYWQgeSBvZnJlY2VyIHNlcnZpY2lvcyBtw6FzIHBlcnNvbmFsaXphZG9zOyBhbGd1bmFzIGRlIHN1cyBwcmluY2lwYWxlcyBhcGxpY2FjaW9uZXMgZW4gbG9zIHNpZ3VpZW50ZXMgw6FtYml0b3M6CiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvNC5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIERldGVjY2nDs24gZGUgZnJhdWRlcy4KICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgQWxnb3JpdG1vcyBkZSA8Yj5NYWNoaW5lIExlYXJuaW5nPC9iPiBpZGVudGlmaWNhbiBwYXRyb25lcyBzb3NwZWNob3NvcyBlbiB0cmFuc2FjY2lvbmVzIHkgcHJldmVuaXIgZnJhdWRlcyBmaW5hbmNpZXJvcy4KICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvNS5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEFuw6FsaXNpcyBkZSByaWVzZ28gY3JlZGl0aWNpbwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBMYSBJQSBldmFsw7phIGhpc3RvcmlhbCBkZSBjcsOpZGl0byBwYXJhIG90b3JnYXIgcHLDqXN0YW1vcyBkZSBtYW5lcmEgbcOhcyBlZmljaWVudGUuCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzYuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBUcmFkaW5nIGFsZ29yw610bWljbwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBMb3Mgc2lzdGVtYXMgZGUgSUEgYW5hbGl6YW4gZGF0b3MgZW4gdGllbXBvIHJlYWwgeSBlamVjdXRhbiBvcGVyYWNpb25lcyBidXJzw6F0aWxlcyBjb24gbWF5b3IgcHJlY2lzacOzbi4KICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvNy5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEF0ZW5jacOzbiBhbCBjbGllbnRlCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIDxlbT5DaGF0Ym90czwvZW0+IGVuIGJhbmNvcyBicmluZGFuIGFzaXN0ZW5jaWEgYXV0b21hdGl6YWRhIDI0LzcuCiAgICAKICAgIHAubWItNCBFbiBsYSBzaWd1aWVudGUgdGFibGEgc2UgbXVlc3RyYW4gZWplbXBsb3MgZW4gbGEgcmVhbGlkYWQgZGUgYXBsaWNhY2lvbmVzLCBlbiBlbCBzZWN0b3IgZmluYW5jaWVyby4KCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDMuCiAgICAgIHNwYW4gQXBsaWNhY2lvbmVzIGRlIGxhIElBIGVuIGVsIHNlY3RvciBmaW5hbmNpZXJvCiAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcy5tYi01CiAgICAgIHRhYmxlLmJnLWNvbG9yLTgKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIMOBcmVhCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciBBcGxpY2FjaW9uZXMgZGUgSUEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEVqZW1wbG8KICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgQXV0b21hdGl6YWNpw7NuIHkgZWZpY2llbmNpYQogICAgICAgICAgICB0ZCBQcm9jZXNhbWllbnRvIGRlIHRyYW5zYWNjaW9uZXMsIGFzZXNvcmFtaWVudG8gZmluYW5jaWVybywgb3B0aW1pemFjacOzbiBkZSBwcm9jZXNvcy4KICAgICAgICAgICAgdGQgQ2l0aWJhbmsgdXRpbGl6YSBJQSBwYXJhIG1lam9yYXIgbGEgZ2VzdGnDs24gZGUgY3VlbnRhcy4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgRGV0ZWNjacOzbiBkZSBmcmF1ZGVzIHkgc2VndXJpZGFkCiAgICAgICAgICAgIHRkIEFuw6FsaXNpcyBkZSBwYXRyb25lcyBzb3NwZWNob3NvcywgYXV0ZW50aWNhY2nDs24gYmlvbcOpdHJpY2EsIGNpYmVyc2VndXJpZGFkLgogICAgICAgICAgICB0ZCBNYXN0ZXJjYXJkIHkgVmlzYSB1dGlsaXphbiBJQSBwYXJhIHByZXZlbmlyIGZyYXVkZXMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBBbsOhbGlzaXMgZGUgcmllc2dvIHkgY3LDqWRpdG8KICAgICAgICAgICAgdGQgTW9kZWxvcyBkZSA8ZW0+c2NvcmluZzwvZW0+IGNyZWRpdGljaW8sIGV2YWx1YWNpw7NuIGRlIHByw6lzdGFtb3MsIHByZWRpY2Npw7NuIGRlIGltcGFnb3MuCiAgICAgICAgICAgIHRkIFplc3RGaW5hbmNlIGFuYWxpemEgY2xpZW50ZXMgc2luIGhpc3RvcmlhbCBjcmVkaXRpY2lvLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCA8ZW0+VHJhZGluZzwvZW0+IGFsZ29yw610bWljbwogICAgICAgICAgICB0ZCA8ZW0+VHJhZGluZzwvZW0+IGRlIGFsdGEgZnJlY3VlbmNpYSwgcHJlZGljY2nDs24gZGUgbWVyY2Fkb3MsIGdlc3Rpw7NuIGRlIHBvcnRhZm9saW9zLgogICAgICAgICAgICB0ZCA8ZW0+QmxhY2tSb2NrPC9lbT4gdXRpbGl6YSBJQSBlbiA8ZW0+QWxhZGRpbjwvZW0+LCBwYXJhIGludmVyc2lvbmVzLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgQXRlbmNpw7NuIGFsIGNsaWVudGUgeSBiYW5jYSBkaWdpdGFsCiAgICAgICAgICAgIHRkIDxlbT5DaGF0Ym90czwvZW0+LCByZWNvbm9jaW1pZW50byBkZSB2b3osIGFuw6FsaXNpcyBkZSBzZW50aW1pZW50by4gCiAgICAgICAgICAgIHRkIDxlbT5CYW5rIG9mIEFtZXJpY2E8L2VtPiB1dGlsaXphIGEgRXJpY2EgY29tbyBhc2lzdGVudGUgdmlydHVhbC4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgQ3VtcGxpbWllbnRvIHJlZ3VsYXRvcmlvCiAgICAgICAgICAgIHRkIE1vbml0b3JlbyBkZSB0cmFuc2FjY2lvbmVzLCBhdWRpdG9yw61hcyBhdXRvbWF0aXphZGFzLCBhbsOhbGlzaXMgZGUgZG9jdW1lbnRvcy4KICAgICAgICAgICAgdGQgSFNCQyB1dGlsaXphIElBIHBhcmEgZGV0ZWN0YXIgbGF2YWRvIGRlIGRpbmVyby4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgPGVtPkZpbnRlY2g8L2VtPiB5IGxhIGlubm92YWNpw7NuIGVuIHBhZ29zCiAgICAgICAgICAgIHRkIFBhZ29zIGRpZ2l0YWxlcywgY3LDqWRpdG9zIGluc3RhbnTDoW5lb3MsIGdlc3Rpw7NuIGZpbmFuY2llcmEgcGVyc29uYWwuCiAgICAgICAgICAgIHRkIFBheVBhbCB1dGlsaXphIElBIHBhcmEgZGV0ZWN0YXIgZnJhdWRlcyBlbiBwYWdvcy4KICAgIAogICAgI3RfM18zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuM10gSW5kdXN0cmlhIHkgbWFudWZhY3R1cmEKICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIHAubWItNCBMYSBJQSwgaGEgb3B0aW1pemFkbyBsYSBwcm9kdWNjacOzbiB5IG1lam9yYWRvIGxhIHNlZ3VyaWRhZCBlbiBmw6FicmljYXMsIGRlc2RlIHByb2Nlc29zIGRlIG1hbnRlbmltaWVudG8gaGFzdGEgbGEgb3B0aW1pemFjacOzbiBkZSBsYSBjYWRlbmEgZGUgc3VtaW5pc3Rybzsgc3VzIHByaW5jaXBhbGVzIGFwb3J0YWNpb25lcyBzZSBlbmN1ZW50cmFuIGVuIGxvcyBjYW1wb3M6CiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvOC5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIE1hbnRlbmltaWVudG8gcHJlZGljdGl2bwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBTZW5zb3JlcyB5IGxhIElBLCBkZXRlY3RhbiBmYWxsb3MgZW4gbcOhcXVpbmFzIGFudGVzIGRlIHF1ZSBvY3VycmFuLCByZWR1Y2llbmRvIHRpZW1wb3MgZGUgaW5hY3RpdmlkYWQuCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzkuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBSb2JvdHMgaW5kdXN0cmlhbGVzCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEJyYXpvcyByb2LDs3RpY29zIGNvbiBJQSwgYXV0b21hdGl6YW4gdGFyZWFzIHJlcGV0aXRpdmFzIGVuIGbDoWJyaWNhcy4KICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTAuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBDb250cm9sIGRlIGNhbGlkYWQKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgU2lzdGVtYXMgZGUgdmlzacOzbiBhcnRpZmljaWFsIGRldGVjdGFuIGRlZmVjdG9zIGVuIHByb2R1Y3RvcywgZHVyYW50ZSBsYSBmYWJyaWNhY2nDs24uCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzExLnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgT3B0aW1pemFjacOzbiBkZSBjYWRlbmFzIGRlIHN1bWluaXN0cm8KICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgTGEgSUEgcHJlZGljZSBsYSBkZW1hbmRhIGRlIHByb2R1Y3RvcyB5IGdlc3Rpb25hIGVsIGludmVudGFyaW8sIGRlIG1hbmVyYSBlZmljaWVudGUuCiAgICAKICAgIHAubWItNCBFbiBsYSBzaWd1aWVudGUgdGFibGEgc2UgbXVlc3RyYW4gZWplbXBsb3MgZW4gbGEgcmVhbGlkYWQgZGUgYXBsaWNhY2lvbmVzLCBlbiBlbCBzZWN0b3IgZmluYW5jaWVyby4KCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDQuCiAgICAgIHNwYW4gQXBsaWNhY2lvbmVzIGRlIGxhIElBIGVuIGxvcyBzZWN0b3JlcyBkZSBpbmR1c3RyaWEgeSBtYW51ZmFjdHVyYQogICAgLnRhYmxhLWEuY29sb3ItYWNlbnRvLWJvdG9uZXMubWItNQogICAgICB0YWJsZS5iZy1jb2xvci04CiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciDDgXJlYQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgQXBsaWNhY2lvbmVzIGRlIElBCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciBFamVtcGxvCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEF1dG9tYXRpemFjacOzbiB5IHJvYsOzdGljYSBpbmR1c3RyaWFsCiAgICAgICAgICAgIHRkIFJvYm90cyBhdXTDs25vbW9zLCBjb2JvdHMsIG9wdGltaXphY2nDs24gZGUgZW5zYW1ibGFqZS4KICAgICAgICAgICAgdGQgVGVzbGEgdXRpbGl6YSByb2JvdHMgaW50ZWxpZ2VudGVzIGVuIHN1IHByb2R1Y2Npw7NuLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBNYW50ZW5pbWllbnRvIHByZWRpY3Rpdm8KICAgICAgICAgICAgdGQgQW7DoWxpc2lzIGRlIHNlbnNvcmVzLCBkZXRlY2Npw7NuIHRlbXByYW5hIGRlIGZhbGxvcywgcmVkdWNjacOzbiBkZSBjb3N0b3MuCiAgICAgICAgICAgIHRkIEdlbmVyYWwgRWxlY3RyaWMgbW9uaXRvcmVhIHR1cmJpbmFzIGNvbiBJQS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIENvbnRyb2wgZGUgY2FsaWRhZAogICAgICAgICAgICB0ZCBWaXNpw7NuIGFydGlmaWNpYWwsIGluc3BlY2Npw7NuIGF1dG9tYXRpemFkYSwgcmVkdWNjacOzbiBkZSBkZXNwZXJkaWNpb3MuCiAgICAgICAgICAgIHRkIEJNVyB1dGlsaXphIElBIHBhcmEgbGEgaW5zcGVjY2nDs24gZCBlIHBpbnR1cmEgZW4gYXV0b3MuCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIExvZ8Otc3RpY2EgeSBjYWRlbmEgZGUgc3VtaW5pc3RybwogICAgICAgICAgICB0ZCBPcHRpbWl6YWNpw7NuIGRlIHJ1dGFzLCBnZXN0acOzbiBkZSBpbnZlbnRhcmlvcywgYWxtYWNlbmVzIGF1dG9tYXRpemFkb3MuCiAgICAgICAgICAgIHRkIEFtYXpvbiB1dGlsaXphIElBIHkgcm9ib3RzLCBlbiBzdXMgY2VudHJvcyBsb2fDrXN0aWNvcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIE9wdGltaXphY2nDs24gZGUgZW5lcmfDrWEgeSBzb3N0ZW5pYmlsaWRhZAogICAgICAgICAgICB0ZCBSZWR1Y2Npw7NuIGRlIGNvbnN1bW8sIHJlY2ljbGFqZSBhdXRvbWF0aXphZG8sIG1pbmltaXphY2nDs24gZGUgcmVzaWR1b3MuIAogICAgICAgICAgICB0ZCBTaWVtZW5zIG9wdGltaXphIGVsIGNvbnN1bW8gZW5lcmfDqXRpY28gZW4gZsOhYnJpY2FzLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBEaXNlw7FvIHkgcHJvdG90aXBhZG8KICAgICAgICAgICAgdGQgR2VuZXJhY2nDs24gZGUgZGlzZcOxb3MsIHNpbXVsYWNpb25lcywgZmFicmljYWNpw7NuIGFkaXRpdmEuCiAgICAgICAgICAgIHRkIEF1dG9kZXNrIG9wdGltaXphIGVsIGRpc2XDsW8gZW4gbGEgaW5kdXN0cmlhIGFlcm9lc3BhY2lhbC4KICAgIAogICAgI3RfM180LnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuNF0gU2VjdG9yIGRlIGxhIHNhbHVkCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTIuc3ZnIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCBoYSByZXZvbHVjaW9uYWRvIGVsIHNlY3RvciBkZWwgdHJhbnNwb3J0ZSB5IGxhIG1vdmlsaWRhZCwgbWVqb3JhbmRvIGxhIGVmaWNpZW5jaWEsIHNlZ3VyaWRhZCB5IHNvc3RlbmliaWxpZGFkIHkgc3VzIGFwbGljYWNpb25lcyB2YW4gZGVzZGUgdmVow61jdWxvcyBhdXTDs25vbW9zIGhhc3RhIG9wdGltaXphY2nDs24gZGVsIHRyw6FmaWNvLCBjb24gbGEgSUEgcmVkZWZpbmllbmRvIGxhIG1hbmVyYSBlbiBxdWUgbm9zIG1vdmVtb3M7IGEgY29udGludWFjacOzbiwgc2UgZGVzY3JpYmVuIGxhcyBwcmluY2lwYWxlcyDDoXJlYXMgeSBhcGxpY2FjaW9uZXMgZGUgbGEgSUEgZW4gZWwgdHJhbnNwb3J0ZS4KICAgIAogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBUYWJsYSA1LgogICAgICBzcGFuIEFwbGljYWNpb25lcyBkZSBsYSBJQSBlbiBlbCBzZWN0b3IgdHJhbnNwb3J0ZQogICAgLnRhYmxhLWEuY29sb3ItYWNlbnRvLWJvdG9uZXMubWItNQogICAgICB0YWJsZS5iZy1jb2xvci04CiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciDDgXJlYQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgQXBsaWNhY2lvbmVzIGRlIElBCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciBFamVtcGxvCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFZlaMOtY3Vsb3MgYXV0w7Nub21vcyB5IGFzaXN0ZW5jaWEgZGUgY29uZHVjY2nDs24KICAgICAgICAgICAgdGQgQ29uZHVjY2nDs24gYXV0w7Nub21hLCBhc2lzdGVudGVzIGRlIGNvbmR1Y2Npw7NuLCBnZXN0acOzbiBkZSBmbG90YXMuCiAgICAgICAgICAgIHRkIFRlc2xhIHkgV2F5bW8gZGVzYXJyb2xsYW4gYXV0b3MgYXV0w7Nub21vcy4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgT3B0aW1pemFjacOzbiBkZWwgdHLDoWZpY28geSBtb3ZpbGlkYWQgdXJiYW5hCiAgICAgICAgICAgIHRkIFNlbcOhZm9yb3MgaW50ZWxpZ2VudGVzLCBwcmVkaWNjacOzbiBkZSBjb25nZXN0acOzbiwgZ2VzdGnDs24gZGUgZXN0YWNpb25hbWllbnRvcy4KICAgICAgICAgICAgdGQgU2luZ2FwdXIgdXRpbGl6YSBJQSBwYXJhIGNvbnRyb2xhciBlbCB0csOhZmljby4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIElBIGVuIGxhIGluZHVzdHJpYSBhZXJvZXNwYWNpYWwgeSBtYXLDrXRpbWEKICAgICAgICAgICAgdGQgUnV0YXMgb3B0aW1pemFkYXMsIG1hbnRlbmltaWVudG8gcHJlZGljdGl2bywgYXZpb25lcyB5IGJhcmNvcyBhdXTDs25vbW9zLgogICAgICAgICAgICB0ZCBSb2xscy1Sb3ljZSBkZXNhcnJvbGxhIGJhcmNvcyBhdXTDs25vbW9zLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBMb2fDrXN0aWNhIHkgdHJhbnNwb3J0ZSBkZSBjYXJnYQogICAgICAgICAgICB0ZCBPcHRpbWl6YWNpw7NuIGRlIHJ1dGFzLCBnZXN0acOzbiBkZSBhbG1hY2VuZXMsIG1hbnRlbmltaWVudG8gcHJlZGljdGl2by4KICAgICAgICAgICAgdGQgVVBTIHV0aWxpemEgSUEgcGFyYSBvcHRpbWl6YXIgcnV0YXMgZGUgZW50cmVnYS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIE1pY3JvbW92aWxpZGFkIHkgdHJhbnNwb3J0ZSBzb3N0ZW5pYmxlCiAgICAgICAgICAgIHRkIEJpY2ljbGV0YXMgeSA8ZW0+c2Nvb3RlcnM8L2VtPiBlbMOpY3RyaWNvcyBpbnRlbGlnZW50ZXMsIG1vbml0b3JlbyBhbWJpZW50YWwuIAogICAgICAgICAgICB0ZCBMaW1lIHV0aWxpemEgSUEgZW4gc3UgZmxvdGEgZGUgPGVtPnNjb290ZXJzPC9lbT4gZWzDqWN0cmljb3MuCiAgICAKICAgICN0XzNfNS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjVdIENvbWVyY2lvIHkgPGVtPm1hcmtldGluZzwvZW0+CiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTMuc3ZnIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCBoYSBwZXJtaXRpZG8gYSBsYXMgZW1wcmVzYXMgb2ZyZWNlciBleHBlcmllbmNpYXMgcGVyc29uYWxpemFkYXMsIG1lam9yYXIgbGEgZWZpY2llbmNpYSB5IG9wdGltaXphciBlc3RyYXRlZ2lhcyBkZSB2ZW50YTsgc3VzIGFwbGljYWNpb25lcyB2YW4gZGVzZGUgbGEgcmVjb21lbmRhY2nDs24gZGUgcHJvZHVjdG9zLCBoYXN0YSBsYSBhdXRvbWF0aXphY2nDs24gZGUgY2FtcGHDsWFzIHB1YmxpY2l0YXJpYXM7IGxhIElBIGVzdMOhIHRyYW5zZm9ybWFuZG8gbGEgZm9ybWEgZW4gcXVlIGxhcyBtYXJjYXMgaW50ZXJhY3TDumFuIGNvbiBsb3MgY29uc3VtaWRvcmVzLiBBIGNvbnRpbnVhY2nDs24sIHNlIHJlbGFjaW9uYW4gbGFzIHByaW5jaXBhbGVzIGFwbGljYWNpb25lcyBlbiBlc3RlIGNhbXBvLgogICAgCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDYuCiAgICAgIHNwYW4gQXBsaWNhY2lvbmVzIGRlIGxhIElBIGVuIGNvbWVyY2lvIHkgPGVtPm1hcmtldGluZzwvZW0+CiAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcy5tYi01CiAgICAgIHRhYmxlLmJnLWNvbG9yLTgKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIMOBcmVhCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciBBcGxpY2FjaW9uZXMgZGUgSUEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEVqZW1wbG8KICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgUGVyc29uYWxpemFjacOzbiBkZSBsYSBleHBlcmllbmNpYSBkZWwgY2xpZW50ZQogICAgICAgICAgICB0ZCBSZWNvbWVuZGFjaW9uZXMsIDxlbT5jaGF0Ym90czwvZW0+LCBhbsOhbGlzaXMgZGUgc2VudGltaWVudG9zLgogICAgICAgICAgICB0ZCBBbWF6b24geSBOZXRmbGl4IHV0aWxpemFuIElBIHBhcmEgcGVyc29uYWxpemFyIGNvbnRlbmlkby4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgUHVibGljaWRhZCBkaWdpdGFsIHkgYXV0b21hdGl6YWNpw7NuIGRlIDxlbT5tYXJrZXRpbmc8L2VtPgogICAgICAgICAgICB0ZCBTZWdtZW50YWNpw7NuIGRlIGF1ZGllbmNpYXMsIGdlbmVyYWNpw7NuIGRlIGNvbnRlbmlkbywgYW7DoWxpc2lzIGRlIHRlbmRlbmNpYXMuCiAgICAgICAgICAgIHRkIEdvb2dsZSBBZHMgb3B0aW1pemEgYW51bmNpb3MgY29uIElBLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgT3B0aW1pemFjacOzbiBkZWwgY29tZXJjaW8gZWxlY3Ryw7NuaWNvCiAgICAgICAgICAgIHRkIFByZWNpb3MgZGluw6FtaWNvcywgZ2VzdGnDs24gZGUgaW52ZW50YXJpb3MsIHByZXZlbmNpw7NuIGRlIGZyYXVkZXMuCiAgICAgICAgICAgIHRkIEFsaWJhYmEgdXRpbGl6YSBJQSBwYXJhIGFqdXN0YXIgcHJlY2lvcywgZW4gdGllbXBvIHJlYWwuCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIExvZ8Otc3RpY2EgeSBjYWRlbmEgZGUgc3VtaW5pc3RybyBpbnRlbGlnZW50ZQogICAgICAgICAgICB0ZCBPcHRpbWl6YWNpw7NuIGRlIHJ1dGFzLCBhdXRvbWF0aXphY2nDs24gZGUgYWxtYWNlbmVzLCBtb25pdG9yZW8gZGUgZW52w61vcy4KICAgICAgICAgICAgdGQgQW1hem9uIGdlc3Rpb25hIGFsbWFjZW5lcyBjb24gSUEgeSByb2JvdHMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBBbsOhbGlzaXMgcHJlZGljdGl2byB5IGNvbXBvcnRhbWllbnRvIGRlbCBjb25zdW1pZG9yCiAgICAgICAgICAgIHRkIFByZWRpY2Npw7NuIGRlIGRlbWFuZGEsIGFqdXN0ZSBkZSBzdXJ0aWRvLCBmaWRlbGl6YWNpw7NuIGRlIGNsaWVudGVzLgogICAgICAgICAgICB0ZCBXYWxtYXJ0IHV0aWxpemEgSUEgcGFyYSBwcmV2ZXIgbGEgZGVtYW5kYSBkZSBwcm9kdWN0b3MuCiAgICAKICAgICN0XzNfNi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjZdIEVkdWNhY2nDs24KICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIHAubWItNCBMYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCAoSUEpLCBlc3TDoSByZXZvbHVjaW9uYW5kbyBsYSBlZHVjYWNpw7NuIGFsIHBlcnNvbmFsaXphciBlbCBhcHJlbmRpemFqZSwgbWVqb3JhciBsYSBlbnNlw7FhbnphIHkgb3B0aW1pemFyIGxhIGdlc3Rpw7NuIGFkbWluaXN0cmF0aXZhOyBzdXMgYXBsaWNhY2lvbmVzIHBlcm1pdGVuIHVuYSBlZHVjYWNpw7NuIG3DoXMgYWNjZXNpYmxlLCBlZmljaWVudGUgZSBpbmNsdXNpdmEuIEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIGxhcyBwcmluY2lwYWxlcyBhcGxpY2FjaW9uZXMgZGUgbGEgSUEgZW4gZXN0ZSBzZWN0b3I6CiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTQuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBQbGF0YWZvcm1hcyBkZSBhcHJlbmRpemFqZSBhZGFwdGF0aXZvCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIExvcyBzaXN0ZW1hcyBhanVzdGFuIGVsIGNvbnRlbmlkbywgc2Vnw7puIGVsIHByb2dyZXNvIGRlbCBlc3R1ZGlhbnRlLgogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xNS5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEFzaXN0ZW50ZXMgZGUgdHV0b3LDrWEgdmlydHVhbAogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBMYSBJQSByZXNwb25kZSBkdWRhcyB5IGF5dWRhIGEgbG9zIGFsdW1ub3MgZW4gdGllbXBvIHJlYWwuCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE2LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgQXV0b21hdGl6YWNpw7NuIGRlIHRhcmVhcyBhZG1pbmlzdHJhdGl2YXMKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgUmVkdWNlIGxhIGNhcmdhIGRlIGxvcyBkb2NlbnRlcyBlbiB0YXJlYXMgcmVwZXRpdGl2YXMuCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE3LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgQW7DoWxpc2lzIGRlbCBkZXNlbXBlw7FvIGVzdHVkaWFudGlsCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIElkZW50aWZpY2EgZXN0dWRpYW50ZXMgZW4gcmllc2dvIHkgc3VnaWVyZSBlc3RyYXRlZ2lhcyBkZSBtZWpvcmEuCiAgICAKICAgIHAubWItNCBFbiBsYSBzaWd1aWVudGUgdGFibGEgc2UgbXVlc3RyYW4gZWplbXBsb3MgZW4gbGEgcmVhbGlkYWQgZGUgYXBsaWNhY2lvbmVzLCBlbiBlbCBzZWN0b3IgZmluYW5jaWVyby4KCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDcuCiAgICAgIHNwYW4gQXBsaWNhY2lvbmVzIGRlIGxhIElBIGVuIGVsIHNlY3RvciBlZHVjYXRpdm8KICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgdGFibGUuYmctY29sb3ItOAogICAgICAgIHRoZWFkCiAgICAgICAgICB0cgogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgw4FyZWEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEFwbGljYWNpb25lcyBkZSBJQQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgRWplbXBsbwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBQZXJzb25hbGl6YWNpw7NuIGRlbCBhcHJlbmRpemFqZQogICAgICAgICAgICB0ZCBQbGF0YWZvcm1hcyBhZGFwdGF0aXZhcywgcmVjb21lbmRhY2nDs24gZGUgY29udGVuaWRvLCB0dXRvcsOtYSBjb24gSUEuCiAgICAgICAgICAgIHRkIER1b2xpbmdvIGFqdXN0YSBsZWNjaW9uZXMsIHNlZ8O6biBlbCBuaXZlbCBkZWwgdXN1YXJpby4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgQXNpc3RlbmNpYSBhIGxvcyBkb2NlbnRlcwogICAgICAgICAgICB0ZCBDb3JyZWNjacOzbiBhdXRvbcOhdGljYSwgZ2VuZXJhY2nDs24gZGUgcGxhbmVzIGRlIGVzdHVkaW8sIGRldGVjY2nDs24gZGUgcGxhZ2lvLgogICAgICAgICAgICB0ZCBUdXJuaXRpbiB1dGlsaXphIElBLCBwYXJhIGlkZW50aWZpY2FyIGNvbnRlbmlkbyBjb3BpYWRvLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgPGVtPkNoYXRib3RzPC9lbT4geSBhc2lzdGVudGVzIHZpcnR1YWxlcwogICAgICAgICAgICB0ZCBSZXNwdWVzdGFzIGF1dG9tw6F0aWNhcywgdHV0b3LDrWFzIDI0LzcsIGludGVyYWNjacOzbiBjb24gbGVuZ3VhamUgbmF0dXJhbC4KICAgICAgICAgICAgdGQgPGVtPlNvY3JhdGljPC9lbT4gZGUgR29vZ2xlIHJlc3BvbmRlIHByZWd1bnRhcyBjb24gSUEuCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIEdlc3Rpw7NuIHkgYWRtaW5pc3RyYWNpw7NuIGVkdWNhdGl2YQogICAgICAgICAgICB0ZCBJbnNjcmlwY2lvbmVzIGF1dG9tw6F0aWNhcywgYW7DoWxpc2lzIGRlIHJlbmRpbWllbnRvLCBvcHRpbWl6YWNpw7NuIGRlIGhvcmFyaW9zLgogICAgICAgICAgICB0ZCBBcml6b25hIFN0YXRlIFVuaXZlcnNpdHkgdXRpbGl6YSBJQSBwYXJhIG1lam9yYXIgbGEgcmV0ZW5jacOzbiBlc3R1ZGlhbnRpbC4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEVkdWNhY2nDs24gaW5jbHVzaXZhIHkgYWNjZXNpYmxlCiAgICAgICAgICAgIHRkIFRyYWR1Y2Npw7NuIGVuIHRpZW1wbyByZWFsLCByZWNvbm9jaW1pZW50byBkZSB2b3osIGxlY3R1cmEgZGUgdGV4dG9zIGVuIHZveiBhbHRhLiAKICAgICAgICAgICAgdGQgU01pY3Jvc29mdCBJbW1lcnNpdmUgUmVhZGVyIGF5dWRhIGEgbG9zIGVzdHVkaWFudGVzIGNvbiBkaXNsZXhpYS4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgR2FtaWZpY2FjacOzbiB5IHJlYWxpZGFkIHZpcnR1YWwKICAgICAgICAgICAgdGQgSnVlZ29zIGVkdWNhdGl2b3MsIHNpbXVsYWNpb25lcywgYXByZW5kaXphamUgaW5tZXJzaXZvIGNvbiByZWFsaWRhZCBhdW1lbnRhZGEuCiAgICAgICAgICAgIHRkIEdvb2dsZSBFeHBlZGl0aW9ucyBvZnJlY2UgdmlhamVzIGVkdWNhdGl2b3MgZW4gUlYuCiAgICAKICAgICN0XzNfNy50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjddIEVudHJldGVuaW1pZW50byB5IG1lZGlvcwogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE4LnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTGEgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgaGEgdHJhbnNmb3JtYWRvIGxhIGluZHVzdHJpYSBkZWwgZW50cmV0ZW5pbWllbnRvIHkgbG9zIG1lZGlvcywgcGVybWl0aWVuZG8gZXhwZXJpZW5jaWFzIHBlcnNvbmFsaXphZGFzLCBhdXRvbWF0aXphY2nDs24gZGUgcHJvY2Vzb3MgY3JlYXRpdm9zIHkgbWVqb3JhcyBlbiBsYSBkaXN0cmlidWNpw7NuIGRlIGNvbnRlbmlkbyB5IHN1cyBhcGxpY2FjaW9uZXMgdmFuIGRlc2RlIHNpc3RlbWFzIGRlIHJlY29tZW5kYWNpw7NuIGhhc3RhIGdlbmVyYWNpw7NuIGRlIGNvbnRlbmlkbyBjb24gSUE7IGVzdGEgdGVjbm9sb2fDrWEgZXN0w6EgcmVkZWZpbmllbmRvIGxhIG1hbmVyYSBlbiBxdWUgY29uc3VtaW1vcyBlbnRyZXRlbmltaWVudG8uIEVuIGxhIHRhYmxhIDggc2UgbXVlc3RyYW4gYWxndW5hcyBkZSBsYXMgYXBsaWNhY2lvbmVzIGVuIGVzdGUgY2FtcG8uCiAgICAKICAgIC50aXR1bG8tZmlndXJhLm1iLTQKICAgICAgaDUgVGFibGEgOC4KICAgICAgc3BhbiBBcGxpY2FjaW9uZXMgZGUgbGEgSUEgZW4gZWwgc2VjdG9yIGRlIGVudHJldGVuaW1pZW50byB5IG1lZGlvcyBkZSBjb211bmljYWNpw7NuCiAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcy5tYi01CiAgICAgIHRhYmxlLmJnLWNvbG9yLTgKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIMOBcmVhCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciBBcGxpY2FjaW9uZXMgZGUgSUEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEVqZW1wbG8KICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgUmVjb21lbmRhY2nDs24gcGVyc29uYWxpemFkYSBkZSBjb250ZW5pZG8KICAgICAgICAgICAgdGQgU2lzdGVtYXMgZGUgcmVjb21lbmRhY2nDs24sIG9wdGltaXphY2nDs24gZGUgaW50ZXJmYWNlcywgYW7DoWxpc2lzIGRlIDxlbT5lbmdhZ2VtZW50PC9lbT4uCiAgICAgICAgICAgIHRkIE5ldGZsaXggeSBTcG90aWZ5IHBlcnNvbmFsaXphbiBjb250ZW5pZG8gY29uIElBLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBDcmVhY2nDs24geSBwcm9kdWNjacOzbiBkZSBjb250ZW5pZG8gY29uIElBCiAgICAgICAgICAgIHRkIEdlbmVyYWNpw7NuIGRlIGd1aW9uZXMsIGVkaWNpw7NuIGRlIHZpZGVvLCA8ZW0+ZGVlcGZha2VzPC9lbT4sIG3DunNpY2EgY29uIElBLgogICAgICAgICAgICB0ZCBPcGVuQUkgZGVzYXJyb2xsw7MgSnVrZWJveCBwYXJhIGNyZWFyIG3DunNpY2EuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBBdXRvbWF0aXphY2nDs24gZGUgbm90aWNpYXMgeSBwZXJpb2Rpc21vCiAgICAgICAgICAgIHRkIFJlZGFjY2nDs24gYXV0b23DoXRpY2EsIDxlbT5mYWN0LWNoZWNraW5nPC9lbT4sIGFuw6FsaXNpcyBkZSBhdWRpZW5jaWEsIHRyYWR1Y2Npw7NuLgogICAgICAgICAgICB0ZCBUaGUgV2FzaGluZ3RvbiBQb3N0IHV0aWxpemEgSUEgY29uIEhlbGlvZ3JhZi4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgSUEgZW4gdmlkZW9qdWVnb3MgeSByZWFsaWRhZCB2aXJ0dWFsCiAgICAgICAgICAgIHRkIE5QQ3MgaW50ZWxpZ2VudGVzLCBtdW5kb3MgcHJvY2VkdXJhbGVzLCBncsOhZmljb3MgbWVqb3JhZG9zLgogICAgICAgICAgICB0ZCBUaGUgTGFzdCBvZiBVcyBQYXJ0IElJLCB1dGlsaXphIElBIGF2YW56YWRhIHBhcmEgbWVqb3JhciBsYSBqdWdhYmlsaWRhZC4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFJlZGVzIHNvY2lhbGVzIHkgY3JlYWNpw7NuIGRlIGNvbnRlbmlkbyBkaWdpdGFsCiAgICAgICAgICAgIHRkIEFsZ29yaXRtb3MgZGUgcmVjb21lbmRhY2nDs24sIGVkaWNpw7NuIGF1dG9tw6F0aWNhLCBjaGF0Ym90cywgbW9kZXJhY2nDs24uCiAgICAgICAgICAgIHRkIFRpa1RvayB1dGlsaXphIElBIHBhcmEgcmVjb21lbmRhciB2aWRlb3MuCiAgICAKICAgICN0XzNfOC50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjhdIFNlZ3VyaWRhZCB5IGNpYmVyc2VndXJpZGFkCiAgICAKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsIGVzdMOhIGNhbWJpYW5kbyBsYSBzZWd1cmlkYWQgZGlnaXRhbCB5IGbDrXNpY2EsIHBlcm1pdGllbmRvIHVuYSBkZXRlY2Npw7NuIGRlIGFtZW5hemFzIG3DoXMgcsOhcGlkYSB5IGVmaWNheiwgYSBjb250aW51YWNpw7NuLCBzZSBtdWVzdHJhbiBzdXMgcHJpbmNpcGFsZXMgYXBsaWNhY2lvbmVzLgogICAgCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDkuCiAgICAgIHNwYW4gQXBsaWNhY2lvbmVzIGRlIGxhIElBIGVuIGVsIHNlY3RvciBkZSBzZWd1cmlkYWQgeSBjaWJlcnNlZ3VyaWRhZAogICAgLnRhYmxhLWEuY29sb3ItYWNlbnRvLWJvdG9uZXMubWItNQogICAgICB0YWJsZS5iZy1jb2xvci04CiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciDDgXJlYQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgQXBsaWNhY2lvbmVzIGRlIElBCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTcudGV4dC13aGl0ZS50ZXh0LWNlbnRlciBFamVtcGxvCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIERldGVjY2nDs24geSBwcmV2ZW5jacOzbiBkZSBjaWJlcmF0YXF1ZXMKICAgICAgICAgICAgdGQgSWRlbnRpZmljYWNpw7NuIGRlIDxlbT5tYWx3YXJlPC9lbT4sIGRldGVjY2nDs24gZGUgaW50cnVzb3MsIGFuw6FsaXNpcyBkZSBjb21wb3J0YW1pZW50by4KICAgICAgICAgICAgdGQgPGVtPkRhcmt0cmFjZTwvZW0+IGRldGVjdGEgY2liZXJhdGFxdWVzIGVuIHRpZW1wbyByZWFsLgogICAgICAgICAgdHIuYmctY29sb3ItOAogICAgICAgICAgICB0ZCBBdXRlbnRpY2FjacOzbiB5IHByb3RlY2Npw7NuIGRlIGRhdG9zCiAgICAgICAgICAgIHRkIFJlY29ub2NpbWllbnRvIGJpb23DqXRyaWNvLCBlbmNyaXB0YWNpw7NuIGF2YW56YWRhLCBtb25pdG9yZW8gZGUgYWNjZXNvcy4KICAgICAgICAgICAgdGQgQXBwbGUgRmFjZSBJRCB1dGlsaXphIElBIHBhcmEgYXV0ZW50aWNhY2nDs24gc2VndXJhLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgUHJldmVuY2nDs24gZGVsIGZyYXVkZSB5IHNlZ3VyaWRhZCBmaW5hbmNpZXJhCiAgICAgICAgICAgIHRkIEFuw6FsaXNpcyBkZSB0cmFuc2FjY2lvbmVzLCBkZXRlY2Npw7NuIGRlIGZyYXVkZXMsIGF1dGVudGljYWNpw7NuIGRlIHVzdWFyaW9zLgogICAgICAgICAgICB0ZCBQYXlQYWwgYmxvcXVlYSB0cmFuc2FjY2lvbmVzIGZyYXVkdWxlbnRhcyBjb24gSUEuCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIFNlZ3VyaWRhZCBmw61zaWNhIHkgdmlnaWxhbmNpYSBpbnRlbGlnZW50ZQogICAgICAgICAgICB0ZCBSZWNvbm9jaW1pZW50byBmYWNpYWwsIHZpZGVvdmlnaWxhbmNpYSwgZHJvbmVzIGRlIHNlZ3VyaWRhZC4KICAgICAgICAgICAgdGQgQ2hpbmEgdXRpbGl6YSBJQSA8Yj5wYXJhIGxhIHZpZ2lsYW5jaWE8L2I+IGVuICBhZXJvcHVlcnRvcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFNlZ3VyaWRhZCBlbiBpbmZyYWVzdHJ1Y3R1cmFzIGNyw610aWNhcyB5IHJlZGVzCiAgICAgICAgICAgIHRkIFByb3RlY2Npw7NuIGRlIHJlZGVzIGluZHVzdHJpYWxlcywgc2VndXJpZGFkIGVuIElvVCwgcHJlZGljY2nDs24gZGUgYXRhcXVlcy4KICAgICAgICAgICAgdGQgSUJNIFdhdHNvbiBTZWN1cml0eSBwcm90ZWdlIGluZnJhZXN0cnVjdHVyYXMgY3LDrXRpY2FzLgogICAgCiAgICAjdF8zXzkudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMy45XSBBZ3JpY3VsdHVyYQogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTkucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbiBjb21wYXJhY2nDs24gY29uIG90cm9zIHNlY3RvcmVzLCBsYSBhZ3JpY3VsdHVyYSBhw7puIG5vIGVzdMOhIHV0aWxpemFuZG8gYWwgbcOheGltbyBsYXMgYXBsaWNhY2lvbmVzIHBvdGVuY2lhbGVzIGRlIGxhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsLCBwdWVzIGxhIGFwbGljYWNpw7NuIGRlIGVzdGEgZW4gZWwgc2VjdG9yIGFncmFyaW8sIHRvZGF2w61hIGVzdMOhIGVuIGZhc2UgZGUgZGVzYXJyb2xsbyBtaWVudHJhcyBxdWUsIGVuIG90cm9zIHNlY3RvcmVzLCB5YSBlcyBtw6FzIHZpc2libGUgc3UgdXRpbGl6YWNpw7NuLiBObyBvYnN0YW50ZSwgY2FkYSB2ZXogc29uIG3DoXMgbGFzIGFwbGljYWNpb25lcyBkZSBsYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCBlbiBsYSBhZ3JpY3VsdHVyYSwgbG8gcXVlIG1lam9yYXLDoSBsYSBnZXN0acOzbiB5IGVmaWNpZW5jaWEgZGUgdG9kYSBsYSBjYWRlbmEsIGRlc2RlIGVsIHRyYWJham8gZGVsIGNhbXBvLCBoYXN0YSBlbCBhbsOhbGlzaXMgeSB1dGlsaXphY2nDs24gZGUgbGEgZ3JhbiBjYW50aWRhZCBkZSBkYXRvcyBxdWUgc2UgZ2VuZXJhbi4KICAgIAogICAgICAgIC5iZy1jb2xvci0xLnAtNC5tYi0zKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yMC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIFVuIGZhY3RvciBwYXJhIGRlc3RhY2FyIGVuIGVsIHNlY3RvciBhZ3JhcmlvLCBlcyBxdWUgaGEgZGVzcGVydGFkbyBlbCBpbnRlcsOpcyBkZSBsb3MgZ3JhbmRlcyBnaWdhbnRlcyBpbmZvcm3DoXRpY29zLCBhcHJvdmVjaGFuZG8gc3UgY29ub2NpbWllbnRvIGVuIGVsIGRlc2Fycm9sbG8gZGUgbGEgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwsIHVuaWRvIGEgcGxhdGFmb3JtYXMgeSBhcGxpY2FjaW9uZXMgZGlnaXRhbGVzLCBxdWUgc2UgZW5jdWVudHJhbiBlbiBjb250aW51byBkZXNhcnJvbGxvLiAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBQb3Igb3RybyBsYWRvLCBlbCB1c28gZGUgZHJvbmVzIHBhcmEgbGEgdG9tYSBkZSBkYXRvcyBlbiBsYXMgZXhwbG90YWNpb25lcyB5IGPDoW1hcmFzIGluZnJhcnJvamFzIHkgbXVsdGllc3BlY3RyYWxlcyBwYXJhIGxhIHRvbWEgZGUgaW3DoWdlbmVzIGRlIGxvcyBjdWx0aXZvcywgaGEgYWJpZXJ0byBudWV2YXMgb3BvcnR1bmlkYWRlcyBwYXJhIGVsIGRlc2Fycm9sbG8gZGUgaGVycmFtaWVudGFzIGJhc2FkYXMgZW4gSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwuIEVuIGxhIHNpZ3VpZW50ZSB0YWJsYSwgc2UgbXVlc3RyYW4gbGFzIHByaW5jaXBhbGVzIGFwbGljYWNpb25lcyBlbiBlc3RlIGNhbXBvLgogICAgCiAgICAudGl0dWxvLWZpZ3VyYS5tYi00CiAgICAgIGg1IFRhYmxhIDEwLgogICAgICBzcGFuIEFwbGljYWNpb25lcyBkZSBsYSBJQSBlbiBlbCBzZWN0b3IgZGUgbGEgYWdyaWN1bHR1cmEKICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgdGFibGUuYmctY29sb3ItOAogICAgICAgIHRoZWFkCiAgICAgICAgICB0cgogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgw4FyZWEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEFwbGljYWNpb25lcyBkZSBJQQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgRWplbXBsbwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBBZ3JpY3VsdHVyYSBkZSBwcmVjaXNpw7NuCiAgICAgICAgICAgIHRkIEFuw6FsaXNpcyBkZWwgc3VlbG8sIGRyb25lcyBwYXJhIG1vbml0b3Jlbywgb3B0aW1pemFjacOzbiBkZSBpbnN1bW9zLgogICAgICAgICAgICB0ZCBKb2huIERlZXJlIHV0aWxpemEgSUEgcGFyYSBhbmFsaXphciBsYSBmZXJ0aWxpZGFkIGRlbCBzdWVsby4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgQXV0b21hdGl6YWNpw7NuIHkgcm9iw7N0aWNhIGFncsOtY29sYQogICAgICAgICAgICB0ZCBUcmFjdG9yZXMgYXV0w7Nub21vcywgY29zZWNoYSByb2JvdGl6YWRhLCBkcm9uZXMgcGFyYSBmdW1pZ2FjacOzbi4KICAgICAgICAgICAgdGQgQmx1ZSBSaXZlciBUZWNobm9sb2d5IG9wdGltaXphIGVsIGNvbnRyb2wgZGUgbWFsZXphcyBjb24gSUEuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBPcHRpbWl6YWNpw7NuIGRlbCB1c28gZGVsIGFndWEgeSByaWVnbyBpbnRlbGlnZW50ZQogICAgICAgICAgICB0ZCBTZW5zb3JlcyBkZSBodW1lZGFkLCByaWVnbyBhdXRvbWF0aXphZG8sIGFuw6FsaXNpcyBjbGltw6F0aWNvLgogICAgICAgICAgICB0ZCBOZXRhZmltIHV0aWxpemEgSUEgcGFyYSBhaG9ycmFyIGFndWEgZW4gZWwgcmllZ28uCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIERldGVjY2nDs24gZGUgcGxhZ2FzIHkgZW5mZXJtZWRhZGVzCiAgICAgICAgICAgIHRkIEFuw6FsaXNpcyBkZSBpbcOhZ2VuZXMsIG1vZGVsb3MgcHJlZGljdGl2b3MsIGFwbGljYWNpb25lcyBtw7N2aWxlcy4KICAgICAgICAgICAgdGQgUGxhbnRpeCBkaWFnbsOzc3RpY2EgZW5mZXJtZWRhZGVzIGVuIGN1bHRpdm9zLCBjb24gSUEuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBBbsOhbGlzaXMgcHJlZGljdGl2byB5IGdlc3Rpw7NuIGRlIGNvc2VjaGFzCiAgICAgICAgICAgIHRkIFByZWRpY2Npw7NuIGRlIHJlbmRpbWllbnRvcywgb3B0aW1pemFjacOzbiBkZSBjb3NlY2hhLCBnZXN0acOzbiBsb2fDrXN0aWNhLgogICAgICAgICAgICB0ZCBJQk0gV2F0c29uIGFudGljaXBhIGxhIHByb2R1Y2Npw7NuIGFncsOtY29sYS4KICAgIAogICAgI3RfM18xMC50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjEwXSBJbmdlbmllcsOtYQogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzIxLnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTGEgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgKElBKSBlc3TDoSBjYW1iaWFuZG8gbGEgaW5nZW5pZXLDrWEgZW4gbcO6bHRpcGxlcyBkaXNjaXBsaW5hcywgZGVzZGUgZWwgZGlzZcOxbyB5IGxhIHNpbXVsYWNpw7NuLCBoYXN0YSBsYSBvcHRpbWl6YWNpw7NuIGRlIHByb2Nlc29zIHkgZWwgbWFudGVuaW1pZW50byBwcmVkaWN0aXZvLiBHcmFjaWFzIGEgbG9zIGFsZ29yaXRtb3MgYXZhbnphZG9zLCA8ZW0+TWFjaGluZSBMZWFybmluZzwvZW0+IHkgcm9iw7N0aWNhLCBsYSBJQSBwZXJtaXRlIG1lam9yYXIgbGEgcHJlY2lzacOzbiwgZWZpY2llbmNpYSB5IHNlZ3VyaWRhZCBlbiBwcm95ZWN0b3MgZGUgaW5nZW5pZXLDrWEuIEEgY29udGludWFjacOzbiwgc2UgcmVsYWNpb25hbiBhbGd1bmFzIGRlIGVzdGFzIGFwbGljYWNpb25lcyBlbiBkaWZlcmVudGVzIGNhbXBvcyBkZSBsYSBpbmdlbmllcsOtYS4KICAgIAogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBUYWJsYSAxMS4KICAgICAgc3BhbiBBcGxpY2FjaW9uZXMgZGUgbGEgSUEgZW4gbGEgaW5nZW5pZXLDrWEKICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgdGFibGUuYmctY29sb3ItOAogICAgICAgIHRoZWFkCiAgICAgICAgICB0cgogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgw4FyZWEKICAgICAgICAgICAgdGguYmctY29sb3ItNy50ZXh0LXdoaXRlLnRleHQtY2VudGVyIEFwbGljYWNpb25lcyBkZSBJQQogICAgICAgICAgICB0aC5iZy1jb2xvci03LnRleHQtd2hpdGUudGV4dC1jZW50ZXIgRWplbXBsbwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBEaXNlw7FvIHkgc2ltdWxhY2nDs24gZW4gaW5nZW5pZXLDrWEKICAgICAgICAgICAgdGQgRGlzZcOxbyBnZW5lcmF0aXZvLCBzaW11bGFjaW9uZXMgcHJlZGljdGl2YXMsIGFuw6FsaXNpcyBkZSBpbXBhY3RvIGFtYmllbnRhbC4KICAgICAgICAgICAgdGQgQXV0b2Rlc2sgdXRpbGl6YSBJQSBwYXJhIG9wdGltaXphY2nDs24gZGUgZGlzZcOxb3MuCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIEluZ2VuaWVyw61hIGNpdmlsIHkgY29uc3RydWNjacOzbgogICAgICAgICAgICB0ZCBNb25pdG9yZW8gY29uIGRyb25lcywgbWFudGVuaW1pZW50byBwcmVkaWN0aXZvLCBjb25zdHJ1Y2Npw7NuIGF1dMOzbm9tYS4KICAgICAgICAgICAgdGQgQm9zdG9uIER5bmFtaWNzIHV0aWxpemEgcm9ib3RzIHBhcmEgaW5zcGVjY2nDs24gZGUgb2JyYXMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBJbmdlbmllcsOtYSBpbmR1c3RyaWFsIHkgbWFudWZhY3R1cmEKICAgICAgICAgICAgdGQgQXV0b21hdGl6YWNpw7NuIGRlIHByb2R1Y2Npw7NuLCBtYW50ZW5pbWllbnRvIHByZWRpY3Rpdm8sIGNvbnRyb2wgaW50ZWxpZ2VudGUuCiAgICAgICAgICAgIHRkIFNpZW1lbnMgb3B0aW1pemEgZsOhYnJpY2FzIGNvbiBJQS4KICAgICAgICAgIHRyLmJnLWNvbG9yLTgKICAgICAgICAgICAgdGQgSW5nZW5pZXLDrWEgYmlvbcOpZGljYSB5IHNhbHVkCiAgICAgICAgICAgIHRkIERpc2XDsW8gZGUgcHLDs3Rlc2lzLCBhbsOhbGlzaXMgZGUgaW3DoWdlbmVzIG3DqWRpY2FzLCBzaW11bGFjaW9uZXMgYmlvbMOzZ2ljYXMuCiAgICAgICAgICAgIHRkIFplYnJhIE1lZGljYWwgVmlzaW9uIGRldGVjdGEgZW5mZXJtZWRhZGVzIGNvbiBJQS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEluZ2VuaWVyw61hIGVuZXJnw6l0aWNhIHkgbWVkaW9hbWJpZW50YWwKICAgICAgICAgICAgdGQgPGVtPlNtYXJ0IGdyaWRzPC9lbT4sIGVuZXJnw61hcyByZW5vdmFibGVzLCBtb25pdG9yZW8gYW1iaWVudGFsLCBnZXN0acOzbiBkZSByZXNpZHVvcy4KICAgICAgICAgICAgdGQgR29vZ2xlIERlZXBNaW5kIG9wdGltaXphIGVsIGNvbnN1bW8gZW5lcmfDqXRpY28uCiAgICAgICAgICB0ci5iZy1jb2xvci04CiAgICAgICAgICAgIHRkIEluZ2VuaWVyw61hIGFlcm9lc3BhY2lhbCB5IGF1dG9tb3RyaXoKICAgICAgICAgICAgdGQgRGlzZcOxbyBvcHRpbWl6YWRvLCB2ZWjDrWN1bG9zIGF1dMOzbm9tb3MsIG1hbnRlbmltaWVudG8gcHJlZGljdGl2by4KICAgICAgICAgICAgdGQgVGVzbGEgaW1wbGVtZW50YSBJQSBlbiBsYSBjb25kdWNjacOzbiBhdXTDs25vbWEuCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTMKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZSBFbiByZXN1bWVuLCBsYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCBzZSBoYSBjb25zb2xpZGFkbyBjb21vIHVuYSBoZXJyYW1pZW50YSBjbGF2ZSBwYXJhIGxhIHRyYW5zZm9ybWFjacOzbiBkaWdpdGFsLCBlbiBtw7psdGlwbGVzIHNlY3RvcmVzLCBpbXBhY3RhbmRvIGxhIGVmaWNpZW5jaWEsIGxhIHRvbWEgZGUgZGVjaXNpb25lcyB5IGxhIGlubm92YWNpw7NuLiBTdSBpbnRlZ3JhY2nDs24gaGEgcGVybWl0aWRvIG1lam9yYXIgcHJvY2Vzb3MsIHJlZHVjaXIgY29zdG9zIHkgb3B0aW1pemFyIGxhIGdlc3Rpw7NuIGRlIHJlY3Vyc29zIGVuIMOhcmVhcyB0YW4gZGl2ZXJzYXMgY29tbyBsYSBzYWx1ZCwgbGEgZWR1Y2FjacOzbiwgbGEgaW5kdXN0cmlhLCBlbCBjb21lcmNpbyB5IGxhIHNlZ3VyaWRhZCwgZW50cmUgb3RyYXMuCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5hY3RpdmlkYWQuYmctY29sb3ItYWN0aXZpZGFkCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgI0FjdGl2aWRhZCAgICAgICAgICAgICAgICAKICAgICAgICAgIDxBY3RpdmlkYWQgOmN1ZXN0aW9uYXJpbz0iY3Vlc3Rpb25hcmlvIi8+CgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvNTc1ODIiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBCZW7DrXRleiBJZ2zDqXNpYXMsIFIuICgyMDE0KS4gSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgYXZhbnphZGE6ICggZWQuKS4gRWRpdG9yaWFsIFVPQy4gIAoKICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cuaWJtLmNvbS9teC1lcy90b3BpY3MvYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBJQk0gKDIwIGRlIG1hcnpvIGRlIDIwMjUpLiDCv1F1w6kgZXMgbGEgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgKElBKT8gSUJNLiAKCiAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlL3prTTZUZ0JudnJvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgUHJvZmUgTHVpcy4gKDIwMjUsIDIyIGRlIG1hcnpvKS4gSW50cm9kdWNjacOzbiBhIGxhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsOiBDb25jZXB0b3MsIGhpc3RvcmlhIHkgYXBsaWNhY2lvbmVzIGRlIGxhIElBIFtWaWRlb10uIFlvdXR1YmUuIAoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQogIAo="},null]}